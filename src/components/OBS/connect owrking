import React, { useEffect, useState, useRef } from "react";
import { useParams } from "react-router-dom";
import confetti from "canvas-confetti";
import { makeStyles } from "@material-ui/core/styles";

import theme from "../../theme";
import { Badge, Typography } from "@material-ui/core";

function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  });
  return ref.current;
}

export default function OBSPlugin(props) {
  const [height, setHeight] = useState(46);
  const [giftOpening, setGiftOpening] = useState(false);

  const useStyles = makeStyles((theme) => {
    return {
      wishlistLink: {
        position: "absolute",
        bottom: 0,
        background: "white",
        padding: ".1em .3em",
      },
      badgeObs: {
        position: "absolute",
        height: "83px",

        bottom: `${height}px`,
        width: "80px",
      },
      openGift: {
        animationName: "shoot-to-center",
        animationDuration: "6s,6s",
        animationTimingFunction: "linear,ease-in-out",
        animationIterationCount: "1",
        animationPlayState: "running,running",
      },
      openGiftBox: {
        position: "fixed",
        bottom: `${height}px`,
      },
      gift: {
        height: "83px",
        position: "fixed",
        bottom: `${height}px`,
        zIndex: "9999",
        webkitUserSelect: "none",
        mozUserSelect: "none",
        msUserSelect: "none",
        userSelect: "none",
        cursor: "default",
        webkitAnimationName: "snowflakes-fall,snowflakes-shake",
        webkitAnimationDuration: "6s,6s",
        webkitAnimationTimingFunction: "linear,ease-in-out",
        webkitAnimationIterationCount: "1",
        webkitAnimationPlayState: "running,running",
        animationName: "snowflakes-fall,snowflakes-shake",
        animationDuration: "6s,6s",
        animationTimingFunction: "linear,ease-in-out",
        animationIterationCount: "1",
        animationPlayState: "running,running",
      },
      ".snowflake:nth-of-type(0)": {
        left: "1%",
        webkitAnimationDelay: "0s,0s",
        animationDelay: "0s,0s",
      },
      "@global": {
        "@keyframes shoot-to-center": {
          "0%": { bottom: "46px", left: "30px" },
          "100%": { bottom: "50%", left: "50%" },
        },
        "@webkitKeyframes snowflakes-fall": {
          "0%": { bottom: "90%" },
          "100%": { bottom: `${height}px` },
        },
        "@keyframes snowflakes-fall": {
          "0%": { bottom: "90%" },
          "100%": { bottom: `${height}px` },
        },
        "@webkitKeyframes snowflakes-shake": {
          "0%": {
            webkitTransform: "translateX(0px)",
            transform: "translateX(0px)",
          },
          "50%": {
            webkitTransform: "translateX(30px)",
            transform: "translateX(30px)",
          },
          "100%": {
            webkitTransform: "translateX(0px)",
            transform: "translateX(0px)",
          },
        },
        "@keyframes snowflakes-shake": {
          "0%": { transform: "translateX(30px)" },
          "33%": { transform: "translateX(0px)" },
          "66%": { transform: "translateX(30px)" },
          "100%": { transform: "translateX(0px)" },
        },
      },
    };
  });
  const classes = useStyles(props);
  let { alias: aliasPath } = useParams();
  const URL = "ws://127.0.0.1:4000?aliasPath=" + aliasPath;

  const socket = useRef(null);
  const [items, setItems] = useState([]);
  const previousItems = usePrevious(items);

  const [reconnectInterval, setReconnectInterval] = useState(null);
  const [intervalHandle, setIntervalHandle] = useState(null);

  useEffect(() => {
    document.body.style.backgroundImage =
      "url('https://nypost.com/wp-content/uploads/sites/2/2019/11/camgirl-main-1a.jpg?quality=80&strip=all')";
    setHeight(
      document.getElementsByClassName(classes.wishlistLink)[0].offsetHeight
    );
    connect();

    return () => {
      socket.current.close();
      // socket?.close();
    };
  }, []);

  useEffect(() => {
    setReconnectInterval(2000);
    return () => window.clearInterval(intervalHandle);
  }, []);

  useEffect(() => {
    if (reconnectInterval === null) {
      window.clearInterval(intervalHandle);
    } else {
      setIntervalHandle(
        window.setInterval(() => {
          connect();
          console.log("reconnecting...");
        }, reconnectInterval)
      );
    }
  }, [reconnectInterval]);

  function connect() {
    socket.current = new WebSocket(URL);
    socket.current.onopen = onOpen;
    socket.current.onclose = onClose;
    socket.current.onmessage = onMessage;

    setReconnectInterval(null);
  }

  useEffect(() => {
    //  if socket.current.onmessage = onMessage; is not updated every time items updates
    // items will be stale/ stale closure in onMessage
    socket.current.onmessage = onMessage;
  }, [socket, items, giftOpening]);

  function onMessage(e) {
    const data = JSON.parse(e.data);
    const it = data.body;
    if (data.type === "new") {
      setItems((prev) => [...prev, it]);
    }
    if (data.type === "seen") {
      const match = items.find((i) => i.id === it.id);
      if (match) {
        setGiftOpening(match);
        setItems(items.filter((item) => item.id !== match.id));
      }
    }
  }

  function onOpen(e) {
    console.log("socket ready state", socket.current.readyState);
    if (socket.current.readyState === 0) return;
    socket.current.send(
      JSON.stringify({
        type: "connect",
        user: Date.now(),
      })
    );
  }

  function onClose(e) {
    setReconnectInterval(2000);
  }

  useEffect(() => {
    if (!previousItems && !items.length) return;
    if (
      (!previousItems && items.length) ||
      items.length > previousItems.length
    ) {
      // if it got bigger?
      confetti({
        //   zIndex: 9000,
        angle: 290,
        startVelocity: 30,
        colors: [
          theme.palette.primary.main,
          theme.palette.primary.light,
          theme.palette.secondary.main,
          theme.palette.primary.light,
        ],
        origin: {
          x: 0,
          y: 0,
        },
      });
      // if (items.imageURL) {

      // }
    } else if (items.length < previousItems.length) {
      confetti({
        //   zIndex: 9000,
        angle: 50,
        startVelocity: 55,
        colors: [
          theme.palette.primary.main,
          theme.palette.primary.light,
          theme.palette.secondary.main,
          theme.palette.primary.light,
        ],
        origin: {
          x: 0.08,
          y: 0.8,
        },
      });

      function sleep(fn, par) {
        return new Promise((resolve) => {
          // wait 3s before calling fn(par)
          setTimeout(() => resolve(fn(par)), 3000);
        });
      }
      sleep(
        (par) => par(false),
        () => setGiftOpening(false)
      );
    }
  }, [items]);

  return (
    <div>
      {items.length > 0 ? (
        <Badge
          className={classes.badgeObs}
          badgeContent={items.length}
          color="primary"
        ></Badge>
      ) : (
        ""
      )}
      {giftOpening && (
        <>
          <img
            className={classes.openGiftBox}
            alt=""
            style={{
              width: "80px",
            }}
            // src="../images/giftObsNoOutlineOpen.png"
            src="../images/giftObsShadowOpen.png"
          />
          <img
            className={classes.openGift}
            alt=""
            style={{
              width: "80px",
            }}
            src={giftOpening.imageURL}
          />
        </>
      )}
      {items.map &&
        items.map((item) => (
          <div className={classes.gift}>
            <img
              alt=""
              style={{
                width: "80px",
              }}
              // src="../images/giftObs.png"
              // src="../images/giftObsWhiteOutline.png"
              src="../images/giftObsShadow.png"
              // src="../images/giftObsNoOutline.png"
            />
          </div>
        ))}
      <div className={classes.wishlistLink}>
        <Typography color="textSecondary">Buy me a gift at</Typography>{" "}
        wishtender.com/<b>{aliasPath}</b>
      </div>
    </div>
  );
}
